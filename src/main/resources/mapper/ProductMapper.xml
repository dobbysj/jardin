<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.javalec.ex.dao.ProductDao">
	<!-- 제품 전체 리스트  -->
	<select id="getAllPList" resultType="com.javalec.ex.dto.ProductDto">
		select * from product_tb  where p_delflag = 'N' order by p_num desc
	</select>

	<!-- 제품 insert -->
	<insert id="insertProduct" parameterType="com.javalec.ex.dto.ProductDto">
		insert into product_tb values(p_seq.nextval,#{p_step1},#{p_step2},#{p_name},#{p_price},#{p_point},'쟈뎅','상품페이지 참고',
		#{p_type},'상품페이지 참고','상품페이지 참고','쟈뎅',#{p_gene},#{p_import},#{p_stock},#{p_thumb_img1},#{p_thumb_img2,jdbcType=VARCHAR},#{p_thumb_img3,jdbcType=VARCHAR},#{p_content_img},sysdate,sysdate,'N',0)
	</insert>
	
	<!-- 제품 하나의 정보  -->
	<select id="getProductInfo" resultType="com.javalec.ex.dto.ProductDto" parameterType="Integer">
		select * from product_tb where p_num = #{p_num}
	</select>
	
	<!-- 제품 수정 -->
	<update id="updateProduct" parameterType="com.javalec.ex.dto.ProductDto">
		update product_tb set p_step1=#{p_step1},p_step2=#{p_step2},p_name=#{p_name},p_price=#{p_price},p_point=#{p_point},p_producer=#{p_producer},p_expiry=#{p_expiry},p_type=#{p_type},
		p_capacity=#{p_capacity},p_detail=#{p_detail},p_location=#{p_location},p_gene=#{p_gene},p_import=#{p_import},p_stock=#{p_stock},
		p_thumb_img1=#{p_thumb_img1},p_thumb_img2=#{p_thumb_img2},p_thumb_img3=#{p_thumb_img3},p_content_img=#{p_content_img},p_update=sysdate where p_num = #{p_num}
	</update>

	<!-- 제품 삭제처리 -->
	<update id="deleteProduct" parameterType="Integer">
		update product_tb set p_delflag='Y' where p_num = #{p_num}
	</update>
	
	<!-- 삭제된 제품 전체리스트 -->
	<select id="getDelPList" resultType="com.javalec.ex.dto.ProductDto">
		select * from product_tb  where p_delflag = 'Y' order by p_num desc
	</select>
	
	<!-- 제품 복구처리 -->
	<update id="backProduct" parameterType="Integer">
		update product_tb set p_delflag='N' where p_num = #{p_num}
	</update>
	
	<!-- 제품 리스트 검색 -->
	<select id="getSearchList" parameterType="hashmap"  resultType="com.javalec.ex.dto.ProductDto" >
        select * from product_tb where
		p_delflag = #{p_delflag} and
 		p_sysdate between to_date(#{e_start_day},'yy/MM/dd') and to_date(#{e_end_day},'yy/MM/dd')+1
		and 
        p_name like '%' ||#{p_name} || '%' and
        p_step2 = #{p_step2}
	</select>
	
	<!-- ================================= 유저 ================================== -->
	
	<!-- 제품 전체 리스트  step1 -->
	<select id="getU_ProductAllList" parameterType="String" resultType="com.javalec.ex.dto.ProductDto">
		select * from product_tb  where p_delflag = 'N' and 
		p_step1= #{p_step1} order by p_num desc
	</select>
	
	<!-- 제품 전체 리스트  step2 -->
	<select id="getU_ProductList" parameterType="String" resultType="com.javalec.ex.dto.ProductDto">
		select * from product_tb  where p_delflag = 'N' and 
		p_step2= #{p_step2} order by p_num desc
	</select>
	
	<!-- 리뷰 등록 -->
	<insert id="review_insert" parameterType="com.javalec.ex.dto.ReviewUserDto">
		insert into review_user_tb values(ru_seq.nextval,#{p_num},#{m_num},#{ru_title},#{ru_content},#{ru_score},sysdate,0,'답변대기','노출',#{ru_img},#{ru_type},#{ol_num})
	</insert>
	
	<!-- 리뷰 등록시 제품에 별점반영 -->
	<update id="update_score" parameterType="Integer">
		update product_tb set p_score = (select round(sum(ru_score)/count(*)) from review_user_tb where p_num = #{p_num}) where p_num = #{p_num}
	</update>
	
	<!-- 제품 리뷰 가져오기 (타입별 답글까지 가져와야함)-->
	<select id="getUserReview"  resultType="hashmap" parameterType="hashmap"> 
		select ru.*,rpad(substr(m.m_id,1,3),length(m.m_id),'*') as m_id, ra.*, a.ad_grade 
		from review_user_tb ru 
		left join member_tb m on m.m_num = ru.m_num 
		left join review_answer_tb ra on ra.ru_num = ru.ru_num  
		left join admin_tb a on ra.ad_num = a.ad_num
        where ru.ru_type= #{ru_type}
 		and ru.p_num = #{p_num}
        and ru.ru_visility = '노출'
	</select>
	
	<!-- 제품별 리뷰count (리뷰 가져올때 가져오면 되는데...group by로 바꿔야 가능할것같다... 그냥..안할래)-->
	<select id="review_count" parameterType="Integer" resultType="Integer">
		select count(*) from review_user_tb where p_num = #{p_num} and ru_visility='노출'
	</select>
	
	
	<!-- 메인에서 제품 검색 -->
	<select id="searchProduct" parameterType="String"  resultType="com.javalec.ex.dto.ProductDto" >
        select * from product_tb where p_name like '%' ||#{keyword} || '%'
	</select>
	
	<!-- 신상품순 정렬 -->
	<select id="search_sort_new" parameterType="hashmap"  resultType="com.javalec.ex.dto.ProductDto" >
        select * from product_tb where  p_name like '%' ||#{keyword} || '%' order by p_sysdate desc
	</select>
	
	<!-- 낮은가격순 정렬 -->
	<select id="search_sort_low" parameterType="hashmap"  resultType="com.javalec.ex.dto.ProductDto" >
        select * from product_tb where  p_name like '%' ||#{keyword} || '%' order by p_price asc
	</select>
	
	<!-- 가격높은 순 정렬 -->
	<select id="search_sort_high" parameterType="hashmap"  resultType="com.javalec.ex.dto.ProductDto" >
        select * from product_tb where  p_name like '%' ||#{keyword} || '%' order by p_price desc
	</select>
	
	
	<!-- ================================ 질문과 답변 ============================== -->
	<!-- 질문 insert -->
	<insert id="inquiry_insert" parameterType="com.javalec.ex.dto.QnrUserDto">
		insert into qna_user_tb values(qu_seq.nextval,#{m_num},#{p_num},#{qu_title},#{qu_content},sysdate,'답변대기',#{qu_pw})
	</insert>
	
	<!-- 제품의 qna 가져오기 -->
	<select id="qunOne" parameterType="Integer" resultType="hashmap">
		select qu.*,rpad(substr(m.m_id,1,3),length(m.m_id),'*') as m_id,qa.* from qna_user_tb qu 
		left join qna_answer_tb qa on qu.qu_num = qa.qa_num
		left join member_tb m on m.m_num = qu.m_num where p_num = #{p_num}
	</select>
	
	<!-- 장바구니 insert -->
	<insert id="cart_insert" parameterType="com.javalec.ex.dto.CartDto">
		insert into cart_tb values(cart_seq.nextval,#{m_num},#{p_num},#{ca_amount},sysdate)
	</insert>
	
	
	<!-- =================================== 제품 상세보기에서의 페이징 ====================ㅎ;;;; -->
	
	<!-- 한 제품의 리뷰 페이징 리스트 -->
	<select id="pageReviewList" resultType="hashmap">
		 select * from 
         (select rownum rnum,review.* from 
         (select re.*,p.p_name,rpad(substr(m.m_id,1,3),length(m.m_id),'*') as m_id,ra.ra.ra_num,ra.ad_num,ra.ra_content,ra.ra_date
         from review_user_tb re 
         left join review_answer_tb ra on ra.ru_num = re.ru_num
		 left join product_tb p on p.p_num = re.p_num 
		 left join member_tb m on re.m_num = m.m_num
		 where re.ru_type = #{ru_type} and re.p_num= #{p_num} order by re.ru_num asc) review) r
         where <![CDATA[r.rnum>=#{pageDto.endRow}]]> and <![CDATA[r.rnum<=#{pageDto.startRow}]]> order by r.rnum desc
	</select>
	
	<!-- 한 제품의 리뷰 총 개수 -->
	<select id="pageReviewCount" resultType="Integer">
		select count(*) from review_user_tb where ru_type=#{ru_type} and p_num=#{p_num}
	</select>
	
	<!-- 한 제품의 질문과 답변 페이징 리스트 -->
	<select id="qnaList" resultType="hashmap">
		 select * from 
         (select rownum rnum,qna.* from 
         (select qu.*,p.p_name,rpad(substr(m.m_id,1,3),length(m.m_id),'*') as m_id,qa.qa_num,qa.ad_num,qa.qa_content,qa.qa_date
         from qna_user_tb qu 
         left join qna_answer_tb qa on qa.qu_num = qu.qu_num
		 left join product_tb p on p.p_num = qu.p_num 
		 left join member_tb m on qu.m_num = m.m_num
		 where qu.p_num= #{p_num} order by qu.qu_num asc) qna) r
         where <![CDATA[r.rnum>=#{pageDto.endRow}]]> and <![CDATA[r.rnum<=#{pageDto.startRow}]]> order by r.rnum desc
	</select>
	
	<!-- 한 제품의 질문 총 개수 -->
	<select id="qnaUserCount" resultType="Integer">
		select count(*) from qna_user_tb where p_num = #{p_num}
	</select>
	
</mapper>